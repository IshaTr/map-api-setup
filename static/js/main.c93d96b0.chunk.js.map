{"version":3,"sources":["components/Map.js","components/SideNav.js","components/App.js","serviceWorker.js","index.js"],"names":["ContainerElement","styled","div","Map","lat","lng","MyMapComponent","compose","withScriptjs","withGoogleMap","props","defaultCenter","defaultZoom","position","googleMapURL","loadingElement","style","height","containerElement","mapElement","Wrapper","Input","input","isValid","Img","img","Form","form","Error","span","SideNav","setLat","setLng","isDefaultLatTrue","isDefaultLngTrue","isLatValid","isLngValid","src","type","required","value","onChange","e","placeholder","App","React","useState","handleDefaultStateLat","handleDefaultStateLng","setLatValidity","setLngValidity","regex","isValidCoordinates","coord","test","event","target","parseFloat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c93d96b0.chunk.js","sourcesContent":["import React  from 'react';\nimport { compose } from 'recompose';\nimport styled from 'styled-components';\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n    InfoWindow,\n} from 'react-google-maps';\n\nconst ContainerElement = styled.div`\n    height: 789px;\n    width: 100%;\n\n    @media(max-width: 480px) {\n        width: 78%;\n        height: 300px;\n    }\n`;\n\nconst Map = ({ lat, lng }) => {\n    const MyMapComponent = compose(withScriptjs, withGoogleMap)(props => {\n        return (\n            <GoogleMap\n                defaultCenter = { { lat: props.lat, lng: props.lng } }\n                defaultZoom = {13}\n            >        \n                <Marker position={{ lat: props.lat, lng: props.lng }}>\n                    <InfoWindow>\n                        <div>\n                            coordinates {props.lat},{props.lng}\n                        </div>\n                    </InfoWindow>\n                </Marker>      \n            </GoogleMap>\n        );\n    });\n\n    return (\n        <MyMapComponent\n            googleMapURL='https://maps.googleapis.com/maps/api/js?key=AIzaSyAzcrF58HyN3PONl3vAEBCZnWibIgewoDI&v=3.exp&libraries=geometry,drawing,places'\n            loadingElement={<div style={{ height: `100%` }} />}\n            containerElement={ <ContainerElement />}\n            mapElement={ <div style={{ height: '100%'}} /> }\n            lat={lat}\n            lng={lng}\n        />\n    )\n}\n\nexport default Map;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    position:relative; \n    margin-bottom:45px; \n    margin: 45px 24px;\n`;\n\nconst Input = styled.input`\n    transition: 0.3s all ease-in-out;\n    font-size: 18px;\n    padding: 10px 10px 10px 5px;\n    display: block;\n    width: 80%;\n    border-radius: 4px;\n    border: ${props => props.isValid ? '1px solid #d8d8d8' : '1px solid red'};\n\n    &:focus {\n        outline:none;\n        border: 1px solid black;\n    }\n`;\n\nconst Img = styled.img`\n    height: 50%;\n    width: 100%;\n`;\n\nconst Form = styled.form`\n    width: 50%;\n\n    @media (max-width: 480px) {\n        width: 78%;\n    }\n `;\n\n const Error = styled.span`\n    color: red;\n    font-size: 16px;\n `;\n\nconst SideNav = ({\n    lat,\n    lng,\n    setLat,\n    setLng,\n    isDefaultLatTrue,\n    isDefaultLngTrue,\n    isLatValid,\n    isLngValid,\n}) => (\n    <Form> \n        <Img src='https://cdn.dribbble.com/users/22683/screenshots/6531794/map.png'/>\n        <Wrapper>\n            <Input\n                isValid={isLatValid}\n                type='text'\n                required\n                value={!isDefaultLatTrue ? lat : ''}\n                onChange={e => setLat(e)}\n                placeholder='Lattitude'\n            />\n            {!isLatValid && <Error>please enter a valid value</Error>}\n        </Wrapper>\n        <Wrapper>\n            <Input\n                isValid={isLngValid}\n                type='text'\n                required\n                value={!isDefaultLngTrue ? lng : ''}\n                onChange={e => setLng(e)}\n                placeholder='Longitude'\n            />\n            {!isLngValid && <Error>please enter a valid value</Error>}\n        </Wrapper>    \n    </Form>\n);\n\nexport default SideNav;","import React from 'react';\nimport styled from 'styled-components';\nimport Map from './Map';\nimport SideNav from './SideNav';\n\nconst Wrapper = styled.div`\n  display: flex;\n\n  @media (max-width: 480px) {\n    display: block;\n  }\n`;\n\nexport const getAddress = url => {\n  const address = null;\n  fetch(url)\n    .then(r => r.json())\n    .then(data => {\n      address = data;\n      return data;\n    });\n  return address;\n}\n\nconst App = () => {\n  const [isDefaultLatTrue, handleDefaultStateLat] = React.useState(true);\n  const [isDefaultLngTrue, handleDefaultStateLng] = React.useState(true);\n  const [isLatValid, setLatValidity] = React.useState(true);\n  const [isLngValid, setLngValidity] = React.useState(true);\n  const [lat, setLat] = React.useState(33);\n  const [lng, setLng] = React.useState(-77);\n\n  const regex = /^(\\-?\\d+(\\.\\d+)?)$/;\n\n  const isValidCoordinates = coord => (\n    regex.test(coord)\n  )\n\n  const setLattitude = event => {\n    isValidCoordinates(event.target.value) ? \n      setLat(parseFloat(event.target.value)) :\n      setLat(event.target.value);\n    handleDefaultStateLat(false);\n    setLatValidity(isValidCoordinates(event.target.value));\n  };\n\n  const setLongitude = event => {\n    isValidCoordinates(event.target.value) ? \n      setLng(parseFloat(event.target.value)) :\n      setLng(event.target.value);\n    handleDefaultStateLng(false);\n    setLngValidity(isValidCoordinates(event.target.value));\n  };\n\n  return (\n    <Wrapper>\n      <Map\n        lat={lat}\n        lng={lng}\n      />\n      <SideNav\n        lat={lat}\n        lng={lng}\n        isLatValid={isLatValid}\n        isLngValid={isLngValid}\n        setLat={setLattitude}\n        setLng={setLongitude}\n        isDefaultLatTrue={isDefaultLatTrue}\n        isDefaultLngTrue={isDefaultLngTrue}\n      />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}